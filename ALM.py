import numpy as npfrom scipy.integrate import dblquadfrom scipy import statsimport matplotlib.pyplot as pltfrom mpl_toolkits import mplot3dtitle_font = {'fontname':'Arial', 'size':'20', 'color':'black', 'weight':'normal', 'verticalalignment':'bottom'} # Bottom vertical alignment for more space axis_font = {'fontname':'Arial', 'size':'14'}def f_exp(y1,lam_exp):    'Función de densidad distribución exponencial'    expo=np.exp(-y1*lam_exp)*lam_exp #densidad exponencial.    return(expo)def F_exp(y1,lam_exp):    'Función de distribución exponencial'    F=1-np.exp(-y1*lam_exp)    return(F)def f_unif(y2,a,b):    'Función de densidad uniforme'    return np.where(y2>=a,np.where(y2<=b,1/(b-a),0),0)def F_unif(y2,a,b):    'Función de distribuación uniforme'    return np.where(y2<a,0,np.where(y2<=b,(y2-a)/(b-a),1))def cuantil_unif(p2,a,b):    'Función cuantil (inversa de la distribución uniforme)'    return(b*p2+a*(1-p2))def cuantil_exp(p1,lam_exp):    'Función cuantil exponencial'    return(-np.log(1-p1)/lam_exp)def funcion_Q_M_2(mu,sig,p,r,eta,theta,x1,x2,L1,L2,lam1,lam2,lam_exp,a_unif,b_unif):    "integrando 3.8, con y1 sim exponencial y y2 sim uniforme"    return (np.exp(r*eta*(cuantil_exp(1-x1,lam_exp)+cuantil_exp(1-x2,lam_exp)))-1)*L1*L2*lam1*lam2*(1+theta)*(((L1*lam1*x1)**(-theta)+(L2*lam2*(x2))**(-theta))**(-((1/theta)+2)))*((L1*L2*lam1*lam2*(x1)*(x2))**(-(theta+1)))def funcion_Q_L(mu,sig,p,r,eta,theta,L1,L2,lam1,lam2,lam_exp,a_unif,b_unif):    "Q case Arquimedia"    "funcion Q(L)"    return (1/2*((mu-r)/sig)**2+r*eta*(L1*p[0]+L2*p[1])-dblquad(lambda x1,x2: funcion_Q_M_2(mu,sig,p,r,eta,theta,x1,x2,L1,L2,lam1,lam2,lam_exp,a_unif,b_unif),0.0001,1,0.0001,1)[0])#### Parametersy1_ej = 5y2_ej = 15lam_exp_ej1 = 0.5 #gamma_1lam_exp_ej2 = 0.7 #gamma_2a_ej = 1 #parametros uniformb_ej = 2 #parametros uniformtheta_ej = 5lam1_ej = 0.1lam2_ej = 0.05L1_ej = 3L2_ej = 2p1= 0.4p2= 0.5p_ej = np.array([p1,p2])r_ej = 0.04mu_ej = 0.06sig_ej = 0.21eta_ej = 5y1_plot = np.linspace(0,120,200)y2_plot = np.linspace(0,200,200)